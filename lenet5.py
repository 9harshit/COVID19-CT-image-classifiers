# -*- coding: utf-8 -*-
"""LeNet5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ieIi3sg4Zv0bUh1PA02ftTGW3xChSVdT
"""

from google.colab import drive
drive.mount('/content/drive')

import tensorflow as tf
import keras
import keras.layers as layers

classifier = keras.Sequential()

classifier.add(layers.Conv2D(filters=6, kernel_size=(3, 3), activation='relu', input_shape=(64,64,3)))
classifier.add(layers.AveragePooling2D())

classifier.add(layers.Conv2D(filters=16, kernel_size=(3, 3), activation='relu'))
classifier.add(layers.AveragePooling2D())

classifier.add(layers.Flatten())

classifier.add(layers.Dense(units=120, activation='relu'))

classifier.add(layers.Dense(units=84, activation='relu'))

classifier.add(layers.Dense(units=1, activation = 'sigmoid'))

classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

tf.keras.utils.plot_model(
    classifier, to_file='model.png', show_shapes=False, show_layer_names=True,
    rankdir='TB', expand_nested=False, dpi=96
)

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/My Drive/covid-dataset/training_set',
                                                 target_size = (64, 64),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

test_set = test_datagen.flow_from_directory('/content/drive/My Drive/covid-dataset/test_set',
                                            target_size = (64, 64),
                                            batch_size = 32,
                                            class_mode = 'binary')
from keras.callbacks import  EarlyStopping

#early = EarlyStopping(monitor='val_accuracy', min_delta=0, patience=20, verbose=1, mode='auto')
#,callbacks = early

classifier.fit_generator(training_set,
                         epochs = 10,
                         validation_data = test_set)
classifier.save("lenet.h5")

import matplotlib.pyplot as plt
plt.plot(classifier.history.history['accuracy'])
plt.plot(classifier.history.history['val_accuracy'])
plt.plot(classifier.history.history['loss'])
plt.plot(classifier.history.history['val_loss'])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","Validation Accuracy","loss","Validation Loss"])
plt.show()