# -*- coding: utf-8 -*-
"""incepres.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l70vSxihhEeZiFRk3lgiMrvIM2XZaRkV
"""

from google.colab import drive
drive.mount('/content/drive')

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Jul 26 12:56:41 2020

@author: harshit
"""

from tensorflow.keras.models import Model
import tensorflow as tf
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization, GlobalAveragePooling2D

# Initialising the CNN
classifier_base = tf.keras.applications.InceptionResNetV2(input_shape = (75,75,3),
    include_top=False
)
x = classifier_base.output
x = GlobalAveragePooling2D()(x)
x = BatchNormalization()(x)
x = Dropout(0.5)(x)


predictions = Dense(1, activation = 'sigmoid')(x)
classifier = Model(classifier_base.input,predictions)

# Compiling the CNN
classifier_base.summary()
classifier_base.trainable = False


classifier.summary()
# Convolutional Neural Network
classifier.compile(optimizer = 'adam', loss = 'binary_crossentropy', metrics = ['accuracy'])

# Installing Theano
# pip install --upgrade --no-deps git+git://github.com/Theano/Theano.git

# Installing Tensorflow
# pip install tensorflow

# Part 2 - Fitting the CNN to the images

from keras.preprocessing.image import ImageDataGenerator

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)

training_set = train_datagen.flow_from_directory('/content/drive/My Drive/covid-dataset/training_set',
                                                 target_size = (75, 75),
                                                 batch_size = 32,
                                                 class_mode = 'binary')

test_set = test_datagen.flow_from_directory('/content/drive/My Drive/covid-dataset/test_set',
                                            target_size = (75, 75),
                                            batch_size = 32,
                                            class_mode = 'binary')

classifier.fit(training_set,
                         epochs = 15,
                         validation_data = test_set)


# classifier.save("vgg166.h5")

import matplotlib.pyplot as plt
plt.plot(classifier.history.history['accuracy'])
plt.plot(classifier.history.history['val_accuracy'])
plt.plot(classifier.history.history['loss'])
plt.plot(classifier.history.history['val_loss'])
plt.title("model accuracy")
plt.ylabel("Accuracy")
plt.xlabel("Epoch")
plt.legend(["Accuracy","Validation Accuracy","loss","Validation Loss"])
plt.show()